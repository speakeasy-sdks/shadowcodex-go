// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type AdminConversationsSearchSecurity struct {
	SlackAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type AdminConversationsSearchRequest struct {
	// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Name of the the channel to query by.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types).
	SearchChannelTypes *string `queryParam:"style=form,explode=true,name=search_channel_types"`
	// Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)
	SortDir *string `queryParam:"style=form,explode=true,name=sort_dir"`
	// Comma separated string of team IDs, signifying the workspaces to search through.
	TeamIds *string `queryParam:"style=form,explode=true,name=team_ids"`
	// Authentication token. Requires scope: `admin.conversations:read`
	Token string `header:"style=simple,explode=false,name=token"`
}

type AdminConversationsSearchResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Typical error response
	AdminConversationsSearchErrorSchema map[string]map[string]interface{}
	// Typical success response
	AdminConversationsSearchSchema map[string]map[string]interface{}
}
