// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type ConversationsRepliesSecurity struct {
	SlackAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ConversationsRepliesRequest struct {
	// Conversation ID to fetch thread from.
	Channel *string `queryParam:"style=form,explode=true,name=channel"`
	// Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// Include messages with latest or oldest timestamp in results only when either timestamp is specified.
	Inclusive *bool `queryParam:"style=form,explode=true,name=inclusive"`
	// End of time range of messages to include in results.
	Latest *float64 `queryParam:"style=form,explode=true,name=latest"`
	// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Start of time range of messages to include in results.
	Oldest *float64 `queryParam:"style=form,explode=true,name=oldest"`
	// Authentication token. Requires scope: `conversations:history`
	Token *string `queryParam:"style=form,explode=true,name=token"`
	// Unique identifier of a thread's parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message.
	Ts *float64 `queryParam:"style=form,explode=true,name=ts"`
}

type ConversationsRepliesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Typical error response
	ConversationsRepliesErrorSchema map[string]map[string]interface{}
	// Typical success response
	ConversationsRepliesSuccessSchema map[string]map[string]interface{}
}
