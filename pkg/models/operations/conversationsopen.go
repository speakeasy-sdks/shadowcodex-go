// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type ConversationsOpenSecurity struct {
	SlackAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ConversationsOpenApplicationJSON struct {
	// Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead.
	Channel *string `json:"channel,omitempty"`
	// Boolean, indicates you want the full IM channel definition in the response.
	ReturnIm *bool `json:"return_im,omitempty"`
	// Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`.
	Users *string `json:"users,omitempty"`
}

type ConversationsOpenRequest struct {
	RequestBody *ConversationsOpenApplicationJSON `request:"mediaType=application/json"`
	// Authentication token. Requires scope: `conversations:write`
	Token *string `header:"style=simple,explode=false,name=token"`
}

type ConversationsOpenResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Typical error response
	ConversationsOpenErrorSchema map[string]map[string]interface{}
	// Typical success response
	ConversationsOpenSuccessSchema map[string]map[string]interface{}
}
