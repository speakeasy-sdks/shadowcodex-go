// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type ChatUnfurlSecurity struct {
	SlackAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ChatUnfurlApplicationJSON struct {
	// Channel ID of the message
	Channel string `json:"channel"`
	// Timestamp of the message to add unfurl behavior to.
	Ts string `json:"ts"`
	// URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.
	Unfurls *string `json:"unfurls,omitempty"`
	// Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior
	UserAuthMessage *string `json:"user_auth_message,omitempty"`
	// Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain
	UserAuthRequired *bool `json:"user_auth_required,omitempty"`
	// Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.
	UserAuthURL *string `json:"user_auth_url,omitempty"`
}

type ChatUnfurlRequest struct {
	RequestBody ChatUnfurlApplicationJSON `request:"mediaType=application/json"`
	// Authentication token. Requires scope: `links:write`
	Token string `header:"style=simple,explode=false,name=token"`
}

type ChatUnfurlResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Typical error response
	ChatUnfurlErrorSchema map[string]map[string]interface{}
	// Typical, minimal success response
	ChatUnfurlSuccessSchema map[string]map[string]interface{}
}
