// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type SearchMessagesSecurity struct {
	SlackAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type SearchMessagesRequest struct {
	// Pass the number of results you want per "page". Maximum of `100`.
	Count *int64 `queryParam:"style=form,explode=true,name=count"`
	// Pass a value of `true` to enable query highlight markers (see below).
	Highlight *bool  `queryParam:"style=form,explode=true,name=highlight"`
	Page      *int64 `queryParam:"style=form,explode=true,name=page"`
	// Search query.
	Query string `queryParam:"style=form,explode=true,name=query"`
	// Return matches sorted by either `score` or `timestamp`.
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Change sort direction to ascending (`asc`) or descending (`desc`).
	SortDir *string `queryParam:"style=form,explode=true,name=sort_dir"`
	// Authentication token. Requires scope: `search:read`
	Token string `queryParam:"style=form,explode=true,name=token"`
}

type SearchMessagesResponse struct {
	ContentType string
	// Typical error response
	DefaultErrorTemplate map[string]map[string]interface{}
	// Typical success response
	DefaultSuccessTemplate map[string]map[string]interface{}
	StatusCode             int
	RawResponse            *http.Response
}
