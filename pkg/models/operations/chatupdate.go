// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type ChatUpdateSecurity struct {
	SlackAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ChatUpdateApplicationJSON struct {
	// Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.
	AsUser *string `json:"as_user,omitempty"`
	// A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field.
	Attachments *string `json:"attachments,omitempty"`
	// A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field.
	Blocks *string `json:"blocks,omitempty"`
	// Channel containing the message to be updated.
	Channel string `json:"channel"`
	// Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`.
	LinkNames *string `json:"link_names,omitempty"`
	// Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`.
	Parse *string `json:"parse,omitempty"`
	// New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`.
	Text *string `json:"text,omitempty"`
	// Timestamp of the message to be updated.
	Ts string `json:"ts"`
}

type ChatUpdateRequest struct {
	RequestBody ChatUpdateApplicationJSON `request:"mediaType=application/json"`
	// Authentication token. Requires scope: `chat:write`
	Token string `header:"style=simple,explode=false,name=token"`
}

type ChatUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Typical error response
	ChatUpdateErrorSchema map[string]map[string]interface{}
	// Typical success response
	ChatUpdateSuccessSchema map[string]map[string]interface{}
}
